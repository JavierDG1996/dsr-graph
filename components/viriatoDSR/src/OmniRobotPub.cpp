//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `OmniRobotPub.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <OmniRobotPub.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompOmniRobotPub_OmniRobotPub_ids[2] =
{
    "::Ice::Object",
    "::RoboCompOmniRobotPub::OmniRobotPub"
};
const ::std::string iceC_RoboCompOmniRobotPub_OmniRobotPub_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "pushBaseState"
};
const ::std::string iceC_RoboCompOmniRobotPub_OmniRobotPub_pushBaseState_name = "pushBaseState";

}

bool
RoboCompOmniRobotPub::OmniRobotPub::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompOmniRobotPub_OmniRobotPub_ids, iceC_RoboCompOmniRobotPub_OmniRobotPub_ids + 2, s);
}

::std::vector<::std::string>
RoboCompOmniRobotPub::OmniRobotPub::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompOmniRobotPub_OmniRobotPub_ids[0], &iceC_RoboCompOmniRobotPub_OmniRobotPub_ids[2]);
}

::std::string
RoboCompOmniRobotPub::OmniRobotPub::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompOmniRobotPub::OmniRobotPub::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompOmniRobotPub::OmniRobotPub";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompOmniRobotPub::OmniRobotPub::_iceD_pushBaseState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompGenericBase::TBaseState iceP_state;
    istr->readAll(iceP_state);
    inS.endReadParams();
    this->pushBaseState(::std::move(iceP_state), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompOmniRobotPub::OmniRobotPub::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompOmniRobotPub_OmniRobotPub_ops, iceC_RoboCompOmniRobotPub_OmniRobotPub_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompOmniRobotPub_OmniRobotPub_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_pushBaseState(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompOmniRobotPub::OmniRobotPubPrx::_iceI_pushBaseState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompOmniRobotPub_OmniRobotPub_pushBaseState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_state);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompOmniRobotPub::OmniRobotPubPrx::_newInstance() const
{
    return ::IceInternal::createProxy<OmniRobotPubPrx>();
}
/// \endcond

const ::std::string&
RoboCompOmniRobotPub::OmniRobotPubPrx::ice_staticId()
{
    return OmniRobotPub::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompOmniRobotPub_OmniRobotPub_pushBaseState_name = "pushBaseState";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompOmniRobotPub::upCast(OmniRobotPub* p) { return p; }

void
::IceProxy::RoboCompOmniRobotPub::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< OmniRobotPub>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new OmniRobotPub;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompOmniRobotPub::OmniRobotPub::_iceI_begin_pushBaseState(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompOmniRobotPub_OmniRobotPub_pushBaseState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompOmniRobotPub_OmniRobotPub_pushBaseState_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_state);
        result->endWriteParams();
        result->invoke(iceC_RoboCompOmniRobotPub_OmniRobotPub_pushBaseState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompOmniRobotPub::OmniRobotPub::end_pushBaseState(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompOmniRobotPub_OmniRobotPub_pushBaseState_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompOmniRobotPub::OmniRobotPub::_newInstance() const
{
    return new OmniRobotPub;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompOmniRobotPub::OmniRobotPub::ice_staticId()
{
    return ::RoboCompOmniRobotPub::OmniRobotPub::ice_staticId();
}

RoboCompOmniRobotPub::OmniRobotPub::~OmniRobotPub()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompOmniRobotPub::upCast(OmniRobotPub* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompOmniRobotPub_OmniRobotPub_ids[2] =
{
    "::Ice::Object",
    "::RoboCompOmniRobotPub::OmniRobotPub"
};

}

bool
RoboCompOmniRobotPub::OmniRobotPub::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompOmniRobotPub_OmniRobotPub_ids, iceC_RoboCompOmniRobotPub_OmniRobotPub_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompOmniRobotPub::OmniRobotPub::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompOmniRobotPub_OmniRobotPub_ids[0], &iceC_RoboCompOmniRobotPub_OmniRobotPub_ids[2]);
}

const ::std::string&
RoboCompOmniRobotPub::OmniRobotPub::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompOmniRobotPub::OmniRobotPub::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompOmniRobotPub::OmniRobotPub";
    return typeId;
#else
    return iceC_RoboCompOmniRobotPub_OmniRobotPub_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompOmniRobotPub::OmniRobotPub::_iceD_pushBaseState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompGenericBase::TBaseState iceP_state;
    istr->read(iceP_state);
    inS.endReadParams();
    this->pushBaseState(iceP_state, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompOmniRobotPub_OmniRobotPub_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "pushBaseState"
};

}

/// \cond INTERNAL
bool
RoboCompOmniRobotPub::OmniRobotPub::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompOmniRobotPub_OmniRobotPub_all, iceC_RoboCompOmniRobotPub_OmniRobotPub_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompOmniRobotPub_OmniRobotPub_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_pushBaseState(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompOmniRobotPub::OmniRobotPub::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< OmniRobotPub, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompOmniRobotPub::OmniRobotPub::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< OmniRobotPub, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompOmniRobotPub::_icePatchObjectPtr(OmniRobotPubPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = OmniRobotPubPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(OmniRobotPub::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
