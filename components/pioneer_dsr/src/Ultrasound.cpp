//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `Ultrasound.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Ultrasound.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompUltrasound::HardwareFailedException> iceC_RoboCompUltrasound_HardwareFailedException_init("::RoboCompUltrasound::HardwareFailedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompUltrasound::UnknownSensorException> iceC_RoboCompUltrasound_UnknownSensorException_init("::RoboCompUltrasound::UnknownSensorException");

const ::std::string iceC_RoboCompUltrasound_Ultrasound_ids[2] =
{
    "::Ice::Object",
    "::RoboCompUltrasound::Ultrasound"
};
const ::std::string iceC_RoboCompUltrasound_Ultrasound_ops[] =
{
    "getAllSensorDistances",
    "getAllSensorParams",
    "getAllSonarPose",
    "getBusParams",
    "getSensorDistance",
    "getSensorParams",
    "getSonarsNumber",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_RoboCompUltrasound_Ultrasound_getAllSensorDistances_name = "getAllSensorDistances";
const ::std::string iceC_RoboCompUltrasound_Ultrasound_getAllSensorParams_name = "getAllSensorParams";
const ::std::string iceC_RoboCompUltrasound_Ultrasound_getAllSonarPose_name = "getAllSonarPose";
const ::std::string iceC_RoboCompUltrasound_Ultrasound_getBusParams_name = "getBusParams";
const ::std::string iceC_RoboCompUltrasound_Ultrasound_getSensorDistance_name = "getSensorDistance";
const ::std::string iceC_RoboCompUltrasound_Ultrasound_getSensorParams_name = "getSensorParams";
const ::std::string iceC_RoboCompUltrasound_Ultrasound_getSonarsNumber_name = "getSonarsNumber";

}

RoboCompUltrasound::HardwareFailedException::~HardwareFailedException()
{
}

const ::std::string&
RoboCompUltrasound::HardwareFailedException::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompUltrasound::HardwareFailedException";
    return typeId;
}

RoboCompUltrasound::UnknownSensorException::~UnknownSensorException()
{
}

const ::std::string&
RoboCompUltrasound::UnknownSensorException::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompUltrasound::UnknownSensorException";
    return typeId;
}

bool
RoboCompUltrasound::Ultrasound::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompUltrasound_Ultrasound_ids, iceC_RoboCompUltrasound_Ultrasound_ids + 2, s);
}

::std::vector<::std::string>
RoboCompUltrasound::Ultrasound::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompUltrasound_Ultrasound_ids[0], &iceC_RoboCompUltrasound_Ultrasound_ids[2]);
}

::std::string
RoboCompUltrasound::Ultrasound::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompUltrasound::Ultrasound::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompUltrasound::Ultrasound";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getAllSensorDistances(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    SensorsState ret = this->getAllSensorDistances(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getAllSensorParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    SensorParamsList ret = this->getAllSensorParams(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getAllSonarPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    SonarPoseList ret = this->getAllSonarPose(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getBusParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BusParams ret = this->getBusParams(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getSensorDistance(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_sensor;
    istr->readAll(iceP_sensor);
    inS.endReadParams();
    int ret = this->getSensorDistance(::std::move(iceP_sensor), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getSensorParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_sensor;
    istr->readAll(iceP_sensor);
    inS.endReadParams();
    SensorParams ret = this->getSensorParams(::std::move(iceP_sensor), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getSonarsNumber(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->getSonarsNumber(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompUltrasound_Ultrasound_ops, iceC_RoboCompUltrasound_Ultrasound_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompUltrasound_Ultrasound_ops)
    {
        case 0:
        {
            return _iceD_getAllSensorDistances(in, current);
        }
        case 1:
        {
            return _iceD_getAllSensorParams(in, current);
        }
        case 2:
        {
            return _iceD_getAllSonarPose(in, current);
        }
        case 3:
        {
            return _iceD_getBusParams(in, current);
        }
        case 4:
        {
            return _iceD_getSensorDistance(in, current);
        }
        case 5:
        {
            return _iceD_getSensorParams(in, current);
        }
        case 6:
        {
            return _iceD_getSonarsNumber(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompUltrasound::UltrasoundPrx::_iceI_getAllSensorDistances(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::SensorsState>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getAllSensorDistances_name);
    outAsync->invoke(iceC_RoboCompUltrasound_Ultrasound_getAllSensorDistances_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const UnknownSensorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompUltrasound::UltrasoundPrx::_iceI_getAllSensorParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::SensorParamsList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getAllSensorParams_name);
    outAsync->invoke(iceC_RoboCompUltrasound_Ultrasound_getAllSensorParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompUltrasound::UltrasoundPrx::_iceI_getAllSonarPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::SonarPoseList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getAllSonarPose_name);
    outAsync->invoke(iceC_RoboCompUltrasound_Ultrasound_getAllSonarPose_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompUltrasound::UltrasoundPrx::_iceI_getBusParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::BusParams>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getBusParams_name);
    outAsync->invoke(iceC_RoboCompUltrasound_Ultrasound_getBusParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompUltrasound::UltrasoundPrx::_iceI_getSensorDistance(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::std::string& iceP_sensor, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getSensorDistance_name);
    outAsync->invoke(iceC_RoboCompUltrasound_Ultrasound_getSensorDistance_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_sensor);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const UnknownSensorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompUltrasound::UltrasoundPrx::_iceI_getSensorParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::SensorParams>>& outAsync, const ::std::string& iceP_sensor, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getSensorParams_name);
    outAsync->invoke(iceC_RoboCompUltrasound_Ultrasound_getSensorParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_sensor);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompUltrasound::UltrasoundPrx::_iceI_getSonarsNumber(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getSonarsNumber_name);
    outAsync->invoke(iceC_RoboCompUltrasound_Ultrasound_getSonarsNumber_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompUltrasound::UltrasoundPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UltrasoundPrx>();
}
/// \endcond

const ::std::string&
RoboCompUltrasound::UltrasoundPrx::ice_staticId()
{
    return Ultrasound::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompUltrasound_Ultrasound_getAllSensorDistances_name = "getAllSensorDistances";

const ::std::string iceC_RoboCompUltrasound_Ultrasound_getAllSensorParams_name = "getAllSensorParams";

const ::std::string iceC_RoboCompUltrasound_Ultrasound_getAllSonarPose_name = "getAllSonarPose";

const ::std::string iceC_RoboCompUltrasound_Ultrasound_getBusParams_name = "getBusParams";

const ::std::string iceC_RoboCompUltrasound_Ultrasound_getSensorDistance_name = "getSensorDistance";

const ::std::string iceC_RoboCompUltrasound_Ultrasound_getSensorParams_name = "getSensorParams";

const ::std::string iceC_RoboCompUltrasound_Ultrasound_getSonarsNumber_name = "getSonarsNumber";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompUltrasound::HardwareFailedException> iceC_RoboCompUltrasound_HardwareFailedException_init("::RoboCompUltrasound::HardwareFailedException");

}

RoboCompUltrasound::HardwareFailedException::HardwareFailedException(const ::std::string& what) :
    ::Ice::UserException(),
    what(what)
{
}

RoboCompUltrasound::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompUltrasound::HardwareFailedException::ice_id() const
{
    return "::RoboCompUltrasound::HardwareFailedException";
}

RoboCompUltrasound::HardwareFailedException*
RoboCompUltrasound::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompUltrasound::HardwareFailedException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
RoboCompUltrasound::HardwareFailedException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompUltrasound::HardwareFailedException", -1, true);
    ::Ice::StreamWriter< HardwareFailedException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompUltrasound::HardwareFailedException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< HardwareFailedException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompUltrasound::UnknownSensorException> iceC_RoboCompUltrasound_UnknownSensorException_init("::RoboCompUltrasound::UnknownSensorException");

}

RoboCompUltrasound::UnknownSensorException::UnknownSensorException(const ::std::string& what) :
    ::Ice::UserException(),
    what(what)
{
}

RoboCompUltrasound::UnknownSensorException::~UnknownSensorException() throw()
{
}

::std::string
RoboCompUltrasound::UnknownSensorException::ice_id() const
{
    return "::RoboCompUltrasound::UnknownSensorException";
}

RoboCompUltrasound::UnknownSensorException*
RoboCompUltrasound::UnknownSensorException::ice_clone() const
{
    return new UnknownSensorException(*this);
}

void
RoboCompUltrasound::UnknownSensorException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
RoboCompUltrasound::UnknownSensorException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompUltrasound::UnknownSensorException", -1, true);
    ::Ice::StreamWriter< UnknownSensorException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompUltrasound::UnknownSensorException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UnknownSensorException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompUltrasound::upCast(Ultrasound* p) { return p; }

void
::IceProxy::RoboCompUltrasound::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Ultrasound>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Ultrasound;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompUltrasound::Ultrasound::_iceI_begin_getAllSensorDistances(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getAllSensorDistances_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompUltrasound_Ultrasound_getAllSensorDistances_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompUltrasound_Ultrasound_getAllSensorDistances_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompUltrasound_Ultrasound_getAllSensorDistances_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompUltrasound::SensorsState
IceProxy::RoboCompUltrasound::Ultrasound::end_getAllSensorDistances(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompUltrasound_Ultrasound_getAllSensorDistances_name);
    ::RoboCompUltrasound::SensorsState ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompUltrasound::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompUltrasound::UnknownSensorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompUltrasound::Ultrasound::_iceI_begin_getAllSensorParams(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getAllSensorParams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompUltrasound_Ultrasound_getAllSensorParams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompUltrasound_Ultrasound_getAllSensorParams_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompUltrasound_Ultrasound_getAllSensorParams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompUltrasound::SensorParamsList
IceProxy::RoboCompUltrasound::Ultrasound::end_getAllSensorParams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompUltrasound_Ultrasound_getAllSensorParams_name);
    ::RoboCompUltrasound::SensorParamsList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompUltrasound::Ultrasound::_iceI_begin_getAllSonarPose(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getAllSonarPose_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompUltrasound_Ultrasound_getAllSonarPose_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompUltrasound_Ultrasound_getAllSonarPose_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompUltrasound_Ultrasound_getAllSonarPose_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompUltrasound::SonarPoseList
IceProxy::RoboCompUltrasound::Ultrasound::end_getAllSonarPose(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompUltrasound_Ultrasound_getAllSonarPose_name);
    ::RoboCompUltrasound::SonarPoseList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompUltrasound::Ultrasound::_iceI_begin_getBusParams(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getBusParams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompUltrasound_Ultrasound_getBusParams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompUltrasound_Ultrasound_getBusParams_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompUltrasound_Ultrasound_getBusParams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompUltrasound::BusParams
IceProxy::RoboCompUltrasound::Ultrasound::end_getBusParams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompUltrasound_Ultrasound_getBusParams_name);
    ::RoboCompUltrasound::BusParams ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompUltrasound::Ultrasound::_iceI_begin_getSensorDistance(const ::std::string& iceP_sensor, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getSensorDistance_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompUltrasound_Ultrasound_getSensorDistance_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompUltrasound_Ultrasound_getSensorDistance_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_sensor);
        result->endWriteParams();
        result->invoke(iceC_RoboCompUltrasound_Ultrasound_getSensorDistance_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::RoboCompUltrasound::Ultrasound::end_getSensorDistance(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompUltrasound_Ultrasound_getSensorDistance_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompUltrasound::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompUltrasound::UnknownSensorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompUltrasound::Ultrasound::_iceI_begin_getSensorParams(const ::std::string& iceP_sensor, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getSensorParams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompUltrasound_Ultrasound_getSensorParams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompUltrasound_Ultrasound_getSensorParams_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_sensor);
        result->endWriteParams();
        result->invoke(iceC_RoboCompUltrasound_Ultrasound_getSensorParams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompUltrasound::SensorParams
IceProxy::RoboCompUltrasound::Ultrasound::end_getSensorParams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompUltrasound_Ultrasound_getSensorParams_name);
    ::RoboCompUltrasound::SensorParams ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompUltrasound::Ultrasound::_iceI_begin_getSonarsNumber(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompUltrasound_Ultrasound_getSonarsNumber_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompUltrasound_Ultrasound_getSonarsNumber_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompUltrasound_Ultrasound_getSonarsNumber_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompUltrasound_Ultrasound_getSonarsNumber_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::RoboCompUltrasound::Ultrasound::end_getSonarsNumber(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompUltrasound_Ultrasound_getSonarsNumber_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompUltrasound::Ultrasound::_newInstance() const
{
    return new Ultrasound;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompUltrasound::Ultrasound::ice_staticId()
{
    return ::RoboCompUltrasound::Ultrasound::ice_staticId();
}

RoboCompUltrasound::Ultrasound::~Ultrasound()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompUltrasound::upCast(Ultrasound* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompUltrasound_Ultrasound_ids[2] =
{
    "::Ice::Object",
    "::RoboCompUltrasound::Ultrasound"
};

}

bool
RoboCompUltrasound::Ultrasound::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompUltrasound_Ultrasound_ids, iceC_RoboCompUltrasound_Ultrasound_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompUltrasound::Ultrasound::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompUltrasound_Ultrasound_ids[0], &iceC_RoboCompUltrasound_Ultrasound_ids[2]);
}

const ::std::string&
RoboCompUltrasound::Ultrasound::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompUltrasound::Ultrasound::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompUltrasound::Ultrasound";
    return typeId;
#else
    return iceC_RoboCompUltrasound_Ultrasound_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getAllSensorDistances(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    SensorsState ret = this->getAllSensorDistances(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getAllSensorParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    SensorParamsList ret = this->getAllSensorParams(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getAllSonarPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    SonarPoseList ret = this->getAllSonarPose(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getBusParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BusParams ret = this->getBusParams(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getSensorDistance(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_sensor;
    istr->read(iceP_sensor);
    inS.endReadParams();
    ::Ice::Int ret = this->getSensorDistance(iceP_sensor, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getSensorParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_sensor;
    istr->read(iceP_sensor);
    inS.endReadParams();
    SensorParams ret = this->getSensorParams(iceP_sensor, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceD_getSonarsNumber(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getSonarsNumber(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompUltrasound_Ultrasound_all[] =
{
    "getAllSensorDistances",
    "getAllSensorParams",
    "getAllSonarPose",
    "getBusParams",
    "getSensorDistance",
    "getSensorParams",
    "getSonarsNumber",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
RoboCompUltrasound::Ultrasound::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompUltrasound_Ultrasound_all, iceC_RoboCompUltrasound_Ultrasound_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompUltrasound_Ultrasound_all)
    {
        case 0:
        {
            return _iceD_getAllSensorDistances(in, current);
        }
        case 1:
        {
            return _iceD_getAllSensorParams(in, current);
        }
        case 2:
        {
            return _iceD_getAllSonarPose(in, current);
        }
        case 3:
        {
            return _iceD_getBusParams(in, current);
        }
        case 4:
        {
            return _iceD_getSensorDistance(in, current);
        }
        case 5:
        {
            return _iceD_getSensorParams(in, current);
        }
        case 6:
        {
            return _iceD_getSonarsNumber(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompUltrasound::Ultrasound::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Ultrasound, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompUltrasound::Ultrasound::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Ultrasound, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompUltrasound::_icePatchObjectPtr(UltrasoundPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = UltrasoundPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Ultrasound::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
