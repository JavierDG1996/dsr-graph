//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `Ultrasound.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Ultrasound_h__
#define __Ultrasound_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompUltrasound
{

class Ultrasound;
class UltrasoundPrx;

}

namespace RoboCompUltrasound
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    HardwareFailedException(const ::std::string& what) :
        what(::std::move(what))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string what;
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

class UnknownSensorException : public ::Ice::UserExceptionHelper<UnknownSensorException, ::Ice::UserException>
{
public:

    virtual ~UnknownSensorException();

    UnknownSensorException(const UnknownSensorException&) = default;

    UnknownSensorException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    UnknownSensorException(const ::std::string& what) :
        what(::std::move(what))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string what;
};

struct BusParams
{
    int numSensors;
    int baudRate;
    int basicPeriod;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(numSensors, baudRate, basicPeriod);
    }
};

struct SensorParams
{
    ::std::string device;
    int busId;
    ::std::string name;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const int&, const ::std::string&> ice_tuple() const
    {
        return std::tie(device, busId, name);
    }
};

struct SonarPose
{
    double x;
    double y;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const double&, const double&> ice_tuple() const
    {
        return std::tie(x, y);
    }
};

using SensorParamsList = ::std::vector<SensorParams>;

using SensorsState = ::std::vector<int>;

using SonarPoseList = ::std::vector<SonarPose>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompUltrasound
{

class Ultrasound : public virtual ::Ice::Object
{
public:

    using ProxyType = UltrasoundPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual SensorsState getAllSensorDistances(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllSensorDistances(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SensorParamsList getAllSensorParams(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllSensorParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SonarPoseList getAllSonarPose(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllSonarPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual BusParams getBusParams(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getBusParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int getSensorDistance(::std::string sensor, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getSensorDistance(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SensorParams getSensorParams(::std::string sensor, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getSensorParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int getSonarsNumber(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getSonarsNumber(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompUltrasound
{

class UltrasoundPrx : public virtual ::Ice::Proxy<UltrasoundPrx, ::Ice::ObjectPrx>
{
public:

    SensorsState getAllSensorDistances(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::SensorsState>(true, this, &UltrasoundPrx::_iceI_getAllSensorDistances, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAllSensorDistancesAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompUltrasound::SensorsState>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::SensorsState, P>(false, this, &UltrasoundPrx::_iceI_getAllSensorDistances, context);
    }

    ::std::function<void()>
    getAllSensorDistancesAsync(::std::function<void(::RoboCompUltrasound::SensorsState)> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompUltrasound::SensorsState>(response, ex, sent, this, &RoboCompUltrasound::UltrasoundPrx::_iceI_getAllSensorDistances, context);
    }

    /// \cond INTERNAL
    void _iceI_getAllSensorDistances(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::SensorsState>>&, const ::Ice::Context&);
    /// \endcond

    SensorParamsList getAllSensorParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::SensorParamsList>(true, this, &UltrasoundPrx::_iceI_getAllSensorParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAllSensorParamsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompUltrasound::SensorParamsList>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::SensorParamsList, P>(false, this, &UltrasoundPrx::_iceI_getAllSensorParams, context);
    }

    ::std::function<void()>
    getAllSensorParamsAsync(::std::function<void(::RoboCompUltrasound::SensorParamsList)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompUltrasound::SensorParamsList>(response, ex, sent, this, &RoboCompUltrasound::UltrasoundPrx::_iceI_getAllSensorParams, context);
    }

    /// \cond INTERNAL
    void _iceI_getAllSensorParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::SensorParamsList>>&, const ::Ice::Context&);
    /// \endcond

    SonarPoseList getAllSonarPose(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::SonarPoseList>(true, this, &UltrasoundPrx::_iceI_getAllSonarPose, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAllSonarPoseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompUltrasound::SonarPoseList>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::SonarPoseList, P>(false, this, &UltrasoundPrx::_iceI_getAllSonarPose, context);
    }

    ::std::function<void()>
    getAllSonarPoseAsync(::std::function<void(::RoboCompUltrasound::SonarPoseList)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompUltrasound::SonarPoseList>(response, ex, sent, this, &RoboCompUltrasound::UltrasoundPrx::_iceI_getAllSonarPose, context);
    }

    /// \cond INTERNAL
    void _iceI_getAllSonarPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::SonarPoseList>>&, const ::Ice::Context&);
    /// \endcond

    BusParams getBusParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::BusParams>(true, this, &UltrasoundPrx::_iceI_getBusParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getBusParamsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompUltrasound::BusParams>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::BusParams, P>(false, this, &UltrasoundPrx::_iceI_getBusParams, context);
    }

    ::std::function<void()>
    getBusParamsAsync(::std::function<void(::RoboCompUltrasound::BusParams)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompUltrasound::BusParams>(response, ex, sent, this, &RoboCompUltrasound::UltrasoundPrx::_iceI_getBusParams, context);
    }

    /// \cond INTERNAL
    void _iceI_getBusParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::BusParams>>&, const ::Ice::Context&);
    /// \endcond

    int getSensorDistance(const ::std::string& sensor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &UltrasoundPrx::_iceI_getSensorDistance, sensor, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getSensorDistanceAsync(const ::std::string& sensor, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &UltrasoundPrx::_iceI_getSensorDistance, sensor, context);
    }

    ::std::function<void()>
    getSensorDistanceAsync(const ::std::string& sensor,
                           ::std::function<void(int)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &RoboCompUltrasound::UltrasoundPrx::_iceI_getSensorDistance, sensor, context);
    }

    /// \cond INTERNAL
    void _iceI_getSensorDistance(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    SensorParams getSensorParams(const ::std::string& sensor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::SensorParams>(true, this, &UltrasoundPrx::_iceI_getSensorParams, sensor, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getSensorParamsAsync(const ::std::string& sensor, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompUltrasound::SensorParams>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompUltrasound::SensorParams, P>(false, this, &UltrasoundPrx::_iceI_getSensorParams, sensor, context);
    }

    ::std::function<void()>
    getSensorParamsAsync(const ::std::string& sensor,
                         ::std::function<void(::RoboCompUltrasound::SensorParams)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompUltrasound::SensorParams>(response, ex, sent, this, &RoboCompUltrasound::UltrasoundPrx::_iceI_getSensorParams, sensor, context);
    }

    /// \cond INTERNAL
    void _iceI_getSensorParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompUltrasound::SensorParams>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    int getSonarsNumber(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &UltrasoundPrx::_iceI_getSonarsNumber, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getSonarsNumberAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &UltrasoundPrx::_iceI_getSonarsNumber, context);
    }

    ::std::function<void()>
    getSonarsNumberAsync(::std::function<void(int)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &RoboCompUltrasound::UltrasoundPrx::_iceI_getSonarsNumber, context);
    }

    /// \cond INTERNAL
    void _iceI_getSonarsNumber(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    UltrasoundPrx() = default;
    friend ::std::shared_ptr<UltrasoundPrx> IceInternal::createProxy<UltrasoundPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompUltrasound::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompUltrasound::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<typename S>
struct StreamReader<::RoboCompUltrasound::UnknownSensorException, S>
{
    static void read(S* istr, ::RoboCompUltrasound::UnknownSensorException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompUltrasound::BusParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompUltrasound::BusParams, S>
{
    static void read(S* istr, ::RoboCompUltrasound::BusParams& v)
    {
        istr->readAll(v.numSensors, v.baudRate, v.basicPeriod);
    }
};

template<>
struct StreamableTraits<::RoboCompUltrasound::SensorParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompUltrasound::SensorParams, S>
{
    static void read(S* istr, ::RoboCompUltrasound::SensorParams& v)
    {
        istr->readAll(v.device, v.busId, v.name);
    }
};

template<>
struct StreamableTraits<::RoboCompUltrasound::SonarPose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompUltrasound::SonarPose, S>
{
    static void read(S* istr, ::RoboCompUltrasound::SonarPose& v)
    {
        istr->readAll(v.x, v.y);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompUltrasound
{

using UltrasoundPtr = ::std::shared_ptr<Ultrasound>;
using UltrasoundPrxPtr = ::std::shared_ptr<UltrasoundPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompUltrasound
{

class Ultrasound;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Ultrasound>&);
::IceProxy::Ice::Object* upCast(Ultrasound*);
/// \endcond

}

}

namespace RoboCompUltrasound
{

class Ultrasound;
/// \cond INTERNAL
::Ice::Object* upCast(Ultrasound*);
/// \endcond
typedef ::IceInternal::Handle< Ultrasound> UltrasoundPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompUltrasound::Ultrasound> UltrasoundPrx;
typedef UltrasoundPrx UltrasoundPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(UltrasoundPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompUltrasound
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit HardwareFailedException(const ::std::string& what);
    virtual ~HardwareFailedException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual HardwareFailedException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string what;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

class UnknownSensorException : public ::Ice::UserException
{
public:

    UnknownSensorException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit UnknownSensorException(const ::std::string& what);
    virtual ~UnknownSensorException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual UnknownSensorException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string what;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

struct BusParams
{
    ::Ice::Int numSensors;
    ::Ice::Int baudRate;
    ::Ice::Int basicPeriod;

    bool operator==(const BusParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(numSensors != rhs_.numSensors)
        {
            return false;
        }
        if(baudRate != rhs_.baudRate)
        {
            return false;
        }
        if(basicPeriod != rhs_.basicPeriod)
        {
            return false;
        }
        return true;
    }

    bool operator<(const BusParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(numSensors < rhs_.numSensors)
        {
            return true;
        }
        else if(rhs_.numSensors < numSensors)
        {
            return false;
        }
        if(baudRate < rhs_.baudRate)
        {
            return true;
        }
        else if(rhs_.baudRate < baudRate)
        {
            return false;
        }
        if(basicPeriod < rhs_.basicPeriod)
        {
            return true;
        }
        else if(rhs_.basicPeriod < basicPeriod)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const BusParams& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const BusParams& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const BusParams& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const BusParams& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct SensorParams
{
    ::std::string device;
    ::Ice::Int busId;
    ::std::string name;

    bool operator==(const SensorParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(device != rhs_.device)
        {
            return false;
        }
        if(busId != rhs_.busId)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SensorParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(device < rhs_.device)
        {
            return true;
        }
        else if(rhs_.device < device)
        {
            return false;
        }
        if(busId < rhs_.busId)
        {
            return true;
        }
        else if(rhs_.busId < busId)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SensorParams& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const SensorParams& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const SensorParams& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const SensorParams& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct SonarPose
{
    ::Ice::Double x;
    ::Ice::Double y;
};

typedef ::std::vector<SensorParams> SensorParamsList;

typedef ::std::vector< ::Ice::Int> SensorsState;

typedef ::std::vector<SonarPose> SonarPoseList;

}

namespace RoboCompUltrasound
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorDistances.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getAllSensorDistances.
 */
class Callback_Ultrasound_getAllSensorDistances_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ultrasound_getAllSensorDistances_Base> Callback_Ultrasound_getAllSensorDistancesPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorParams.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getAllSensorParams.
 */
class Callback_Ultrasound_getAllSensorParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ultrasound_getAllSensorParams_Base> Callback_Ultrasound_getAllSensorParamsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSonarPose.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getAllSonarPose.
 */
class Callback_Ultrasound_getAllSonarPose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ultrasound_getAllSonarPose_Base> Callback_Ultrasound_getAllSonarPosePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getBusParams.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getBusParams.
 */
class Callback_Ultrasound_getBusParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ultrasound_getBusParams_Base> Callback_Ultrasound_getBusParamsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorDistance.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getSensorDistance.
 */
class Callback_Ultrasound_getSensorDistance_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ultrasound_getSensorDistance_Base> Callback_Ultrasound_getSensorDistancePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorParams.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getSensorParams.
 */
class Callback_Ultrasound_getSensorParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ultrasound_getSensorParams_Base> Callback_Ultrasound_getSensorParamsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getSonarsNumber.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getSonarsNumber.
 */
class Callback_Ultrasound_getSonarsNumber_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ultrasound_getSonarsNumber_Base> Callback_Ultrasound_getSonarsNumberPtr;

}

namespace IceProxy
{

namespace RoboCompUltrasound
{

class Ultrasound : public virtual ::Ice::Proxy<Ultrasound, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompUltrasound::SensorsState getAllSensorDistances(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAllSensorDistances(_iceI_begin_getAllSensorDistances(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAllSensorDistances(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAllSensorDistances(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllSensorDistances(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSensorDistances(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllSensorDistances(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSensorDistances(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllSensorDistances(const ::RoboCompUltrasound::Callback_Ultrasound_getAllSensorDistancesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSensorDistances(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllSensorDistances(const ::Ice::Context& context, const ::RoboCompUltrasound::Callback_Ultrasound_getAllSensorDistancesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSensorDistances(context, cb, cookie);
    }

    ::RoboCompUltrasound::SensorsState end_getAllSensorDistances(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAllSensorDistances(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompUltrasound::SensorParamsList getAllSensorParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAllSensorParams(_iceI_begin_getAllSensorParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAllSensorParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAllSensorParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllSensorParams(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSensorParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllSensorParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSensorParams(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllSensorParams(const ::RoboCompUltrasound::Callback_Ultrasound_getAllSensorParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSensorParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllSensorParams(const ::Ice::Context& context, const ::RoboCompUltrasound::Callback_Ultrasound_getAllSensorParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSensorParams(context, cb, cookie);
    }

    ::RoboCompUltrasound::SensorParamsList end_getAllSensorParams(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAllSensorParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompUltrasound::SonarPoseList getAllSonarPose(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAllSonarPose(_iceI_begin_getAllSonarPose(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAllSonarPose(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAllSonarPose(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllSonarPose(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSonarPose(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllSonarPose(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSonarPose(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllSonarPose(const ::RoboCompUltrasound::Callback_Ultrasound_getAllSonarPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSonarPose(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllSonarPose(const ::Ice::Context& context, const ::RoboCompUltrasound::Callback_Ultrasound_getAllSonarPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllSonarPose(context, cb, cookie);
    }

    ::RoboCompUltrasound::SonarPoseList end_getAllSonarPose(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAllSonarPose(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompUltrasound::BusParams getBusParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getBusParams(_iceI_begin_getBusParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getBusParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBusParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBusParams(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::RoboCompUltrasound::Callback_Ultrasound_getBusParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBusParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context& context, const ::RoboCompUltrasound::Callback_Ultrasound_getBusParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBusParams(context, cb, cookie);
    }

    ::RoboCompUltrasound::BusParams end_getBusParams(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getBusParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int getSensorDistance(const ::std::string& sensor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getSensorDistance(_iceI_begin_getSensorDistance(sensor, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getSensorDistance(const ::std::string& sensor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getSensorDistance(sensor, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSensorDistance(const ::std::string& sensor, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSensorDistance(sensor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorDistance(const ::std::string& sensor, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSensorDistance(sensor, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorDistance(const ::std::string& sensor, const ::RoboCompUltrasound::Callback_Ultrasound_getSensorDistancePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSensorDistance(sensor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorDistance(const ::std::string& sensor, const ::Ice::Context& context, const ::RoboCompUltrasound::Callback_Ultrasound_getSensorDistancePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSensorDistance(sensor, context, cb, cookie);
    }

    ::Ice::Int end_getSensorDistance(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getSensorDistance(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompUltrasound::SensorParams getSensorParams(const ::std::string& sensor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getSensorParams(_iceI_begin_getSensorParams(sensor, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getSensorParams(const ::std::string& sensor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getSensorParams(sensor, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSensorParams(const ::std::string& sensor, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSensorParams(sensor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorParams(const ::std::string& sensor, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSensorParams(sensor, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorParams(const ::std::string& sensor, const ::RoboCompUltrasound::Callback_Ultrasound_getSensorParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSensorParams(sensor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorParams(const ::std::string& sensor, const ::Ice::Context& context, const ::RoboCompUltrasound::Callback_Ultrasound_getSensorParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSensorParams(sensor, context, cb, cookie);
    }

    ::RoboCompUltrasound::SensorParams end_getSensorParams(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getSensorParams(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int getSonarsNumber(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getSonarsNumber(_iceI_begin_getSonarsNumber(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getSonarsNumber(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getSonarsNumber(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSonarsNumber(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSonarsNumber(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSonarsNumber(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSonarsNumber(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSonarsNumber(const ::RoboCompUltrasound::Callback_Ultrasound_getSonarsNumberPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSonarsNumber(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSonarsNumber(const ::Ice::Context& context, const ::RoboCompUltrasound::Callback_Ultrasound_getSonarsNumberPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSonarsNumber(context, cb, cookie);
    }

    ::Ice::Int end_getSonarsNumber(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getSonarsNumber(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompUltrasound
{

class Ultrasound : public virtual ::Ice::Object
{
public:

    typedef UltrasoundPrx ProxyType;
    typedef UltrasoundPtr PointerType;

    virtual ~Ultrasound();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual SensorsState getAllSensorDistances(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllSensorDistances(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SensorParamsList getAllSensorParams(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllSensorParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SonarPoseList getAllSonarPose(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllSonarPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual BusParams getBusParams(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getBusParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int getSensorDistance(const ::std::string& sensor, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getSensorDistance(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SensorParams getSensorParams(const ::std::string& sensor, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getSensorParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int getSonarsNumber(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getSonarsNumber(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Ultrasound& lhs, const Ultrasound& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Ultrasound& lhs, const Ultrasound& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompUltrasound::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompUltrasound::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompUltrasound::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompUltrasound::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompUltrasound::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompUltrasound::UnknownSensorException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompUltrasound::UnknownSensorException, S>
{
    static void write(S* ostr, const ::RoboCompUltrasound::UnknownSensorException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompUltrasound::UnknownSensorException, S>
{
    static void read(S* istr, ::RoboCompUltrasound::UnknownSensorException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompUltrasound::BusParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompUltrasound::BusParams, S>
{
    static void write(S* ostr, const ::RoboCompUltrasound::BusParams& v)
    {
        ostr->write(v.numSensors);
        ostr->write(v.baudRate);
        ostr->write(v.basicPeriod);
    }
};

template<typename S>
struct StreamReader< ::RoboCompUltrasound::BusParams, S>
{
    static void read(S* istr, ::RoboCompUltrasound::BusParams& v)
    {
        istr->read(v.numSensors);
        istr->read(v.baudRate);
        istr->read(v.basicPeriod);
    }
};

template<>
struct StreamableTraits< ::RoboCompUltrasound::SensorParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompUltrasound::SensorParams, S>
{
    static void write(S* ostr, const ::RoboCompUltrasound::SensorParams& v)
    {
        ostr->write(v.device);
        ostr->write(v.busId);
        ostr->write(v.name);
    }
};

template<typename S>
struct StreamReader< ::RoboCompUltrasound::SensorParams, S>
{
    static void read(S* istr, ::RoboCompUltrasound::SensorParams& v)
    {
        istr->read(v.device);
        istr->read(v.busId);
        istr->read(v.name);
    }
};

template<>
struct StreamableTraits< ::RoboCompUltrasound::SonarPose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompUltrasound::SonarPose, S>
{
    static void write(S* ostr, const ::RoboCompUltrasound::SonarPose& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
    }
};

template<typename S>
struct StreamReader< ::RoboCompUltrasound::SonarPose, S>
{
    static void read(S* istr, ::RoboCompUltrasound::SonarPose& v)
    {
        istr->read(v.x);
        istr->read(v.y);
    }
};

}
/// \endcond

namespace RoboCompUltrasound
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorDistances.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getAllSensorDistances.
 */
template<class T>
class CallbackNC_Ultrasound_getAllSensorDistances : public Callback_Ultrasound_getAllSensorDistances_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SensorsState&);

    CallbackNC_Ultrasound_getAllSensorDistances(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        SensorsState ret;
        try
        {
            ret = proxy->end_getAllSensorDistances(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorDistances.
 */
template<class T> Callback_Ultrasound_getAllSensorDistancesPtr
newCallback_Ultrasound_getAllSensorDistances(const IceUtil::Handle<T>& instance, void (T::*cb)(const SensorsState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getAllSensorDistances<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorDistances.
 */
template<class T> Callback_Ultrasound_getAllSensorDistancesPtr
newCallback_Ultrasound_getAllSensorDistances(T* instance, void (T::*cb)(const SensorsState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getAllSensorDistances<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorDistances.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getAllSensorDistances.
 */
template<class T, typename CT>
class Callback_Ultrasound_getAllSensorDistances : public Callback_Ultrasound_getAllSensorDistances_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SensorsState&, const CT&);

    Callback_Ultrasound_getAllSensorDistances(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        SensorsState ret;
        try
        {
            ret = proxy->end_getAllSensorDistances(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorDistances.
 */
template<class T, typename CT> Callback_Ultrasound_getAllSensorDistancesPtr
newCallback_Ultrasound_getAllSensorDistances(const IceUtil::Handle<T>& instance, void (T::*cb)(const SensorsState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getAllSensorDistances<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorDistances.
 */
template<class T, typename CT> Callback_Ultrasound_getAllSensorDistancesPtr
newCallback_Ultrasound_getAllSensorDistances(T* instance, void (T::*cb)(const SensorsState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getAllSensorDistances<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorParams.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getAllSensorParams.
 */
template<class T>
class CallbackNC_Ultrasound_getAllSensorParams : public Callback_Ultrasound_getAllSensorParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SensorParamsList&);

    CallbackNC_Ultrasound_getAllSensorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        SensorParamsList ret;
        try
        {
            ret = proxy->end_getAllSensorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorParams.
 */
template<class T> Callback_Ultrasound_getAllSensorParamsPtr
newCallback_Ultrasound_getAllSensorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const SensorParamsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getAllSensorParams<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorParams.
 */
template<class T> Callback_Ultrasound_getAllSensorParamsPtr
newCallback_Ultrasound_getAllSensorParams(T* instance, void (T::*cb)(const SensorParamsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getAllSensorParams<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorParams.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getAllSensorParams.
 */
template<class T, typename CT>
class Callback_Ultrasound_getAllSensorParams : public Callback_Ultrasound_getAllSensorParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SensorParamsList&, const CT&);

    Callback_Ultrasound_getAllSensorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        SensorParamsList ret;
        try
        {
            ret = proxy->end_getAllSensorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorParams.
 */
template<class T, typename CT> Callback_Ultrasound_getAllSensorParamsPtr
newCallback_Ultrasound_getAllSensorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const SensorParamsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getAllSensorParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSensorParams.
 */
template<class T, typename CT> Callback_Ultrasound_getAllSensorParamsPtr
newCallback_Ultrasound_getAllSensorParams(T* instance, void (T::*cb)(const SensorParamsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getAllSensorParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSonarPose.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getAllSonarPose.
 */
template<class T>
class CallbackNC_Ultrasound_getAllSonarPose : public Callback_Ultrasound_getAllSonarPose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SonarPoseList&);

    CallbackNC_Ultrasound_getAllSonarPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        SonarPoseList ret;
        try
        {
            ret = proxy->end_getAllSonarPose(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSonarPose.
 */
template<class T> Callback_Ultrasound_getAllSonarPosePtr
newCallback_Ultrasound_getAllSonarPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const SonarPoseList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getAllSonarPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSonarPose.
 */
template<class T> Callback_Ultrasound_getAllSonarPosePtr
newCallback_Ultrasound_getAllSonarPose(T* instance, void (T::*cb)(const SonarPoseList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getAllSonarPose<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSonarPose.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getAllSonarPose.
 */
template<class T, typename CT>
class Callback_Ultrasound_getAllSonarPose : public Callback_Ultrasound_getAllSonarPose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SonarPoseList&, const CT&);

    Callback_Ultrasound_getAllSonarPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        SonarPoseList ret;
        try
        {
            ret = proxy->end_getAllSonarPose(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSonarPose.
 */
template<class T, typename CT> Callback_Ultrasound_getAllSonarPosePtr
newCallback_Ultrasound_getAllSonarPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const SonarPoseList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getAllSonarPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getAllSonarPose.
 */
template<class T, typename CT> Callback_Ultrasound_getAllSonarPosePtr
newCallback_Ultrasound_getAllSonarPose(T* instance, void (T::*cb)(const SonarPoseList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getAllSonarPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getBusParams.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getBusParams.
 */
template<class T>
class CallbackNC_Ultrasound_getBusParams : public Callback_Ultrasound_getBusParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const BusParams&);

    CallbackNC_Ultrasound_getBusParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        BusParams ret;
        try
        {
            ret = proxy->end_getBusParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getBusParams.
 */
template<class T> Callback_Ultrasound_getBusParamsPtr
newCallback_Ultrasound_getBusParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const BusParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getBusParams<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getBusParams.
 */
template<class T> Callback_Ultrasound_getBusParamsPtr
newCallback_Ultrasound_getBusParams(T* instance, void (T::*cb)(const BusParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getBusParams<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getBusParams.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getBusParams.
 */
template<class T, typename CT>
class Callback_Ultrasound_getBusParams : public Callback_Ultrasound_getBusParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const BusParams&, const CT&);

    Callback_Ultrasound_getBusParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        BusParams ret;
        try
        {
            ret = proxy->end_getBusParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getBusParams.
 */
template<class T, typename CT> Callback_Ultrasound_getBusParamsPtr
newCallback_Ultrasound_getBusParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const BusParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getBusParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getBusParams.
 */
template<class T, typename CT> Callback_Ultrasound_getBusParamsPtr
newCallback_Ultrasound_getBusParams(T* instance, void (T::*cb)(const BusParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getBusParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorDistance.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getSensorDistance.
 */
template<class T>
class CallbackNC_Ultrasound_getSensorDistance : public Callback_Ultrasound_getSensorDistance_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Ultrasound_getSensorDistance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getSensorDistance(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorDistance.
 */
template<class T> Callback_Ultrasound_getSensorDistancePtr
newCallback_Ultrasound_getSensorDistance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getSensorDistance<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorDistance.
 */
template<class T> Callback_Ultrasound_getSensorDistancePtr
newCallback_Ultrasound_getSensorDistance(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getSensorDistance<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorDistance.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getSensorDistance.
 */
template<class T, typename CT>
class Callback_Ultrasound_getSensorDistance : public Callback_Ultrasound_getSensorDistance_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Ultrasound_getSensorDistance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getSensorDistance(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorDistance.
 */
template<class T, typename CT> Callback_Ultrasound_getSensorDistancePtr
newCallback_Ultrasound_getSensorDistance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getSensorDistance<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorDistance.
 */
template<class T, typename CT> Callback_Ultrasound_getSensorDistancePtr
newCallback_Ultrasound_getSensorDistance(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getSensorDistance<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorParams.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getSensorParams.
 */
template<class T>
class CallbackNC_Ultrasound_getSensorParams : public Callback_Ultrasound_getSensorParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SensorParams&);

    CallbackNC_Ultrasound_getSensorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        SensorParams ret;
        try
        {
            ret = proxy->end_getSensorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorParams.
 */
template<class T> Callback_Ultrasound_getSensorParamsPtr
newCallback_Ultrasound_getSensorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const SensorParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getSensorParams<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorParams.
 */
template<class T> Callback_Ultrasound_getSensorParamsPtr
newCallback_Ultrasound_getSensorParams(T* instance, void (T::*cb)(const SensorParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getSensorParams<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorParams.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getSensorParams.
 */
template<class T, typename CT>
class Callback_Ultrasound_getSensorParams : public Callback_Ultrasound_getSensorParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SensorParams&, const CT&);

    Callback_Ultrasound_getSensorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        SensorParams ret;
        try
        {
            ret = proxy->end_getSensorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorParams.
 */
template<class T, typename CT> Callback_Ultrasound_getSensorParamsPtr
newCallback_Ultrasound_getSensorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const SensorParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getSensorParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSensorParams.
 */
template<class T, typename CT> Callback_Ultrasound_getSensorParamsPtr
newCallback_Ultrasound_getSensorParams(T* instance, void (T::*cb)(const SensorParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getSensorParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getSonarsNumber.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getSonarsNumber.
 */
template<class T>
class CallbackNC_Ultrasound_getSonarsNumber : public Callback_Ultrasound_getSonarsNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Ultrasound_getSonarsNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getSonarsNumber(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSonarsNumber.
 */
template<class T> Callback_Ultrasound_getSonarsNumberPtr
newCallback_Ultrasound_getSonarsNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getSonarsNumber<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSonarsNumber.
 */
template<class T> Callback_Ultrasound_getSonarsNumberPtr
newCallback_Ultrasound_getSonarsNumber(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ultrasound_getSonarsNumber<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompUltrasound::Ultrasound::begin_getSonarsNumber.
 * Create a wrapper instance by calling ::RoboCompUltrasound::newCallback_Ultrasound_getSonarsNumber.
 */
template<class T, typename CT>
class Callback_Ultrasound_getSonarsNumber : public Callback_Ultrasound_getSonarsNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Ultrasound_getSonarsNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UltrasoundPrx proxy = UltrasoundPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getSonarsNumber(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSonarsNumber.
 */
template<class T, typename CT> Callback_Ultrasound_getSonarsNumberPtr
newCallback_Ultrasound_getSonarsNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getSonarsNumber<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompUltrasound::Ultrasound::begin_getSonarsNumber.
 */
template<class T, typename CT> Callback_Ultrasound_getSonarsNumberPtr
newCallback_Ultrasound_getSonarsNumber(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ultrasound_getSonarsNumber<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
